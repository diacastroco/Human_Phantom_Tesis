#include "G4Fetus.hh"

#include "globals.hh"
#include "G4SystemOfUnits.hh"
#include "G4SDManager.hh"
#include "G4VisAttributes.hh"
#include "G4Ellipsoid.hh"
#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4ThreeVector.hh"
#include "G4VPhysicalVolume.hh"
#include "G4RotationMatrix.hh"
#include "G4Material.hh"
#include "G4LogicalVolume.hh"
#include "G4HumanPhantomMaterial.hh"
#include "G4VPhysicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4HumanPhantomColour.hh"

//#include "G4MIRDUterus.hh"

G4Fetus::G4Fetus()
{
}

G4Fetus::~G4Fetus()
{
}


G4VPhysicalVolume* G4Fetus::Construct(const G4String& volumeName,G4VPhysicalVolume* mother,  
					   const G4String& colourName, G4bool wireFrame, G4bool)
{
 
  G4cout<<"Construct "<<volumeName<<" with mother volume "<<mother->GetName()<<G4endl;
 
  G4HumanPhantomMaterial* material = new G4HumanPhantomMaterial();
  G4Material* soft = material -> GetMaterial("soft_tissue");
  delete material;

  //G4double aax= 2*cm; // Largo hombro a hombro
  //G4double bby= 3*cm; //Largo pies a cabeza
  //G4double ccz= 8.*cm; //Ancho espalda a pecho 

  //G4double zzcut1= -8.*cm; // Corte superior
  //G4double zzcut2= 5*cm; // Corte inferior

  //G4Ellipsoid* fetus = new G4Ellipsoid("Fetus",
  //aax, bby, ccz,
  //zzcut1, zzcut2);

  //Testing cilindro
  G4double radio_max = 1.8*cm;
  G4double dz = 5.*cm;
  G4VSolid* fetus =new G4Tubs("Fetus",0,radio_max,dz,0*deg,360*deg);


  G4LogicalVolume* logicFetus = new G4LogicalVolume(fetus,
						     soft,
						     "logical" + volumeName,
						     0, 0, 0);


  // Define rotation and position here!
  G4RotationMatrix* rm = new G4RotationMatrix();
  rm->rotateX(120.*degree); // 90 grados elipsoide en direcci√≥n Z
  //<90 grados cabeza del elipsoide hacia los pies. 0 grados apuntando a los pies
  //>90 grados elipsoide apuntando al torso

  G4VPhysicalVolume* physFetus = new G4PVPlacement(rm,
						    
						    G4ThreeVector (0. *cm, -3.8*cm,-21. *cm),
						    "physicalFetus", // Componente 1 positivo a la derecha. 0 en el origen
						                      // Componente 2 positivo hacia abajo
						                      // Componente 3 positivo hacia los pies
						    logicFetus,
						    mother,
						    false,
						    0, true);



  // Visualization Attributes
  //  G4VisAttributes* UterusVisAtt = new G4VisAttributes(G4Colour(0.85,0.44,0.84));

  G4HumanPhantomColour* colourPointer = new G4HumanPhantomColour();
  G4Colour colour = colourPointer -> GetColour(colourName);
  G4VisAttributes* FetusVisAtt = new G4VisAttributes(colour);  
  FetusVisAtt->SetForceSolid(wireFrame);
  logicFetus->SetVisAttributes(FetusVisAtt);

  G4cout << "Fetus created !!!!!!" << G4endl;

  // Testing Fetus Volume
  G4double FetusVol = logicFetus->GetSolid()->GetCubicVolume();
  G4cout << "Volume of Fetus = " << FetusVol/cm3 << " cm^3" << G4endl;
  
  // Testing Fetus Material
  G4String FetusMat = logicFetus->GetMaterial()->GetName();
  G4cout << "Material of Fetus = " << FetusMat << G4endl;
  
  // Testing Density
  G4double FetusDensity = logicFetus->GetMaterial()->GetDensity();
  G4cout << "Density of Material = " << FetusDensity*cm3/g << " g/cm^3" << G4endl;

  // Testing Mass
  G4double FetusMass = (FetusVol)*FetusDensity;
  G4cout << "Mass of Fetus = " << FetusMass/gram << " g" << G4endl;
  
  return physFetus;
}
